var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {items: a, addItemInput: b, error: c};
	});
var _user$project$Main$Error = function (a) {
	return {ctor: 'Error', _0: a};
};
var _user$project$Main$FromUi = function (a) {
	return {ctor: 'FromUi', _0: a};
};
var _user$project$Main$FromServer = function (a) {
	return {ctor: 'FromServer', _0: a};
};
var _user$project$Main$fromServer = F2(
	function (msgConstructor, result) {
		var _p0 = result;
		if (_p0.ctor === 'Ok') {
			return _user$project$Main$FromServer(
				msgConstructor(_p0._0));
		} else {
			return _user$project$Main$Error(
				_elm_lang$core$Basics$toString(_p0._0));
		}
	});
var _user$project$Main$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _user$project$Main$CreatedItem = function (a) {
	return {ctor: 'CreatedItem', _0: a};
};
var _user$project$Main$NewItem = function (a) {
	return {ctor: 'NewItem', _0: a};
};
var _user$project$Main$update = F2(
	function (message, s) {
		update:
		while (true) {
			var _p1 = message;
			switch (_p1.ctor) {
				case 'FromServer':
					var _p2 = _p1._0;
					switch (_p2.ctor) {
						case 'Initial':
							return {
								ctor: '_Tuple2',
								_0: s,
								_1: _elm_lang$core$Platform_Cmd$batch(
									A2(
										_elm_lang$core$List$map,
										_elm_lang$http$Http$send(
											_user$project$Main$fromServer(_user$project$Main$NewItem)),
										A2(_elm_lang$core$List$map, _user$project$Api$getApiItemByItemId, _p2._0)))
							};
						case 'NewItem':
							var _p3 = _p2._0;
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_elm_lang$core$Native_Utils.update(
									s,
									{
										items: A3(_elm_lang$core$Dict$insert, _p3.id, _p3, s.items)
									}),
								{ctor: '[]'});
						case 'CreatedItem':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								s,
								{
									ctor: '::',
									_0: A2(
										_elm_lang$http$Http$send,
										_user$project$Main$fromServer(_user$project$Main$NewItem),
										_user$project$Api$getApiItemByItemId(_p2._0)),
									_1: {ctor: '[]'}
								});
						case 'Delete':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_elm_lang$core$Native_Utils.update(
									s,
									{
										items: A2(_elm_lang$core$Dict$remove, _p2._0, s.items)
									}),
								{ctor: '[]'});
						default:
							var _p4 = A2(_elm_lang$core$Debug$log, 'test', _p2._0);
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								s,
								{ctor: '[]'});
					}
				case 'FromUi':
					var _p5 = _p1._0;
					switch (_p5.ctor) {
						case 'AddItemButton':
							var newState = _elm_lang$core$Native_Utils.update(
								s,
								{addItemInput: ''});
							var $new = s.addItemInput;
							var cmd = A2(
								_elm_lang$http$Http$send,
								_user$project$Main$fromServer(_user$project$Main$CreatedItem),
								_user$project$Api$postApiItem($new));
							if (_elm_lang$core$Native_Utils.eq($new, '')) {
								var _v4 = _user$project$Main$Error('empty field'),
									_v5 = s;
								message = _v4;
								s = _v5;
								continue update;
							} else {
								return {ctor: '_Tuple2', _0: newState, _1: cmd};
							}
						case 'AddItemInputChange':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_elm_lang$core$Native_Utils.update(
									s,
									{addItemInput: _p5._0}),
								{ctor: '[]'});
						default:
							return {
								ctor: '_Tuple2',
								_0: s,
								_1: A2(
									_elm_lang$http$Http$send,
									_user$project$Main$fromServer(_user$project$Main$Delete),
									_user$project$Api$deleteApiItemByItemId(_p5._0))
							};
					}
				default:
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							s,
							{
								error: _elm_lang$core$Maybe$Just(_p1._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
			}
		}
	});
var _user$project$Main$Test = function (a) {
	return {ctor: 'Test', _0: a};
};
var _user$project$Main$Initial = function (a) {
	return {ctor: 'Initial', _0: a};
};
var _user$project$Main$init = function () {
	var state = {items: _elm_lang$core$Dict$empty, addItemInput: '', error: _elm_lang$core$Maybe$Nothing};
	var test = A2(
		_elm_lang$http$Http$send,
		_user$project$Main$fromServer(_user$project$Main$Test),
		_user$project$Api$getApiFilesByFolderid(10));
	var fetch = A2(
		_elm_lang$http$Http$send,
		_user$project$Main$fromServer(_user$project$Main$Initial),
		_user$project$Api$getApiItem);
	return {
		ctor: '_Tuple2',
		_0: state,
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: fetch,
				_1: {
					ctor: '::',
					_0: test,
					_1: {ctor: '[]'}
				}
			})
	};
}();
var _user$project$Main$Done = function (a) {
	return {ctor: 'Done', _0: a};
};
var _user$project$Main$viewItem = function (item) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(item.text),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' - '),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Main$FromUi(
									_user$project$Main$Done(item.id))),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('done'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$AddItemButton = {ctor: 'AddItemButton'};
var _user$project$Main$AddItemInputChange = function (a) {
	return {ctor: 'AddItemInputChange', _0: a};
};
var _user$project$Main$view = function (state) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(state)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$map,
					function (_p6) {
						return _user$project$Main$viewItem(
							_elm_lang$core$Tuple$second(_p6));
					},
					_elm_lang$core$Dict$toList(state.items)),
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(
								function (_p7) {
									return _user$project$Main$FromUi(
										_user$project$Main$AddItemInputChange(_p7));
								}),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Main$FromUi(_user$project$Main$AddItemButton)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('add item'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				})));
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: _user$project$Main$init,
		update: _user$project$Main$update,
		subscriptions: function (_p8) {
			return _elm_lang$core$Platform_Sub$none;
		},
		view: _user$project$Main$view
	})();
